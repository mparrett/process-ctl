#!/bin/bash

set -euo pipefail

VERSION="1.0.0"
SCRIPT_NAME="process-ctl"

PID_DIR="$HOME/.cache/process-ctl/pids"
LOG_DIR="$HOME/.cache/process-ctl/logs"

show_usage() {
    cat << EOF
Usage: $SCRIPT_NAME <command>

Commands:
    start      Start service in foreground
    start-bg   Start service as background daemon
    stop       Stop background service
    restart    Restart service
    status     Show service status
    logs       Show service logs
    tail       Show last 50 lines of logs (use -n N for different count)
    follow     Follow logs in real-time
    help       Show this help message

Configuration:
    Searches for .process-ctl-cfg in current directory and parent directories.
    Required: PROJECT_NAME, START_CMD
    Optional: PORT, LOG_MAX_SIZE

Examples:
    $SCRIPT_NAME start
    $SCRIPT_NAME start-bg
    $SCRIPT_NAME status
    $SCRIPT_NAME logs
EOF
}

log_message() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $*" >&2
}

error_exit() {
    log_message "ERROR: $*"
    exit 1
}

ensure_directories() {
    mkdir -p "$PID_DIR" "$LOG_DIR"
}

find_config() {
    local current_dir="$PWD"
    
    while [[ "$current_dir" != "/" ]]; do
        if [[ -f "$current_dir/.process-ctl-cfg" ]]; then
            echo "$current_dir/.process-ctl-cfg"
            return 0
        fi
        current_dir="$(dirname "$current_dir")"
    done
    
    return 1
}

load_config() {
    local config_file
    config_file=$(find_config) || error_exit "No .process-ctl-cfg found in current directory or parent directories"
    
    log_message "Loading configuration from: $config_file"
    
    # Source the configuration file
    # shellcheck source=/dev/null
    source "$config_file"
    
    # Validate required fields
    [[ -z "${PROJECT_NAME:-}" ]] && error_exit "PROJECT_NAME is required in .process-ctl-cfg"
    [[ -z "${START_CMD:-}" ]] && error_exit "START_CMD is required in .process-ctl-cfg"
    
    # Set defaults for optional fields
    PORT="${PORT:-}"
    LOG_MAX_SIZE="${LOG_MAX_SIZE:-50M}"
}

get_pid_file() {
    echo "$PID_DIR/$PROJECT_NAME.pid"
}

get_log_file() {
    echo "$LOG_DIR/$PROJECT_NAME.log"
}

is_process_running() {
    local pid_file="$1"
    
    if [[ ! -f "$pid_file" ]]; then
        return 1
    fi
    
    local pid
    pid=$(cat "$pid_file")
    
    if ! kill -0 "$pid" 2>/dev/null; then
        log_message "Stale PID file found, removing: $pid_file"
        rm -f "$pid_file"
        return 1
    fi
    
    return 0
}

check_port_conflict() {
    [[ -z "$PORT" ]] && return 0
    
    if lsof -i ":$PORT" >/dev/null 2>&1; then
        error_exit "Port $PORT is already in use"
    fi
}

start_foreground() {
    local pid_file log_file
    pid_file=$(get_pid_file)
    log_file=$(get_log_file)
    
    if is_process_running "$pid_file"; then
        error_exit "Service $PROJECT_NAME is already running (PID: $(cat "$pid_file"))"
    fi
    
    check_port_conflict
    
    log_message "Starting $PROJECT_NAME in foreground"
    log_message "Command: $START_CMD"
    
    # Start in foreground, log to both stdout and log file
    exec > >(tee -a "$log_file") 2>&1
    exec $START_CMD
}

start_background() {
    local pid_file log_file
    pid_file=$(get_pid_file)
    log_file=$(get_log_file)
    
    if is_process_running "$pid_file"; then
        error_exit "Service $PROJECT_NAME is already running (PID: $(cat "$pid_file"))"
    fi
    
    check_port_conflict
    
    log_message "Starting $PROJECT_NAME as background daemon"
    log_message "Command: $START_CMD"
    log_message "Log file: $log_file"
    
    # Start in background and capture PID
    nohup bash -c "$START_CMD" >> "$log_file" 2>&1 &
    local pid=$!
    
    echo "$pid" > "$pid_file"
    
    # Give process a moment to start
    sleep 1
    
    if is_process_running "$pid_file"; then
        log_message "Service $PROJECT_NAME started successfully (PID: $pid)"
    else
        error_exit "Failed to start service $PROJECT_NAME"
    fi
}

stop_service() {
    local pid_file
    pid_file=$(get_pid_file)
    
    if ! is_process_running "$pid_file"; then
        log_message "Service $PROJECT_NAME is not running"
        return 0
    fi
    
    local pid
    pid=$(cat "$pid_file")
    
    log_message "Stopping service $PROJECT_NAME (PID: $pid)"
    
    # Try graceful shutdown first
    if kill -TERM "$pid" 2>/dev/null; then
        local count=0
        while kill -0 "$pid" 2>/dev/null && [[ $count -lt 10 ]]; do
            sleep 1
            ((count++))
        done
        
        # If still running, force kill
        if kill -0 "$pid" 2>/dev/null; then
            log_message "Graceful shutdown failed, forcing kill"
            kill -KILL "$pid" 2>/dev/null || true
        fi
    fi
    
    rm -f "$pid_file"
    log_message "Service $PROJECT_NAME stopped"
}

restart_service() {
    log_message "Restarting service $PROJECT_NAME"
    stop_service
    sleep 1
    start_background
}

show_status() {
    local pid_file
    pid_file=$(get_pid_file)
    
    echo "=== Process Status for $PROJECT_NAME ==="
    
    if is_process_running "$pid_file"; then
        local pid
        pid=$(cat "$pid_file")
        echo "Status: RUNNING (PID: $pid)"
        
        # Show process details if ps supports it
        if ps -p "$pid" -o pid,ppid,pcpu,pmem,etime,cmd 2>/dev/null; then
            echo ""
        fi
        
        # Show port info if configured
        if [[ -n "$PORT" ]]; then
            echo "Port: $PORT"
            if lsof -i ":$PORT" 2>/dev/null; then
                echo ""
            fi
        fi
    else
        echo "Status: NOT RUNNING"
        
        # Check if port is in use by another process
        if [[ -n "$PORT" ]]; then
            if lsof -i ":$PORT" >/dev/null 2>&1; then
                echo "⚠️  WARNING: Port $PORT is in use by another process"
                lsof -i ":$PORT"
                echo ""
            fi
        fi
    fi
    
    echo "PID file: $pid_file"
    echo "Log file: $(get_log_file)"
}

show_logs() {
    local log_file
    log_file=$(get_log_file)
    
    if [[ -f "$log_file" ]]; then
        cat "$log_file"
    else
        log_message "No log file found: $log_file"
    fi
}

tail_logs() {
    local log_file lines=50
    log_file=$(get_log_file)
    
    # Parse optional -n argument
    if [[ "${1:-}" == "-n" && -n "${2:-}" ]]; then
        lines="$2"
        shift 2
    fi
    
    if [[ -f "$log_file" ]]; then
        tail -n "$lines" "$log_file"
    else
        log_message "No log file found: $log_file"
        exit 1
    fi
}

follow_logs() {
    local log_file
    log_file=$(get_log_file)
    
    if [[ -f "$log_file" ]]; then
        tail -f "$log_file"
    else
        log_message "No log file found: $log_file"
        exit 1
    fi
}

main() {
    ensure_directories
    
    case "${1:-}" in
        start)
            load_config
            start_foreground
            ;;
        start-bg)
            load_config
            start_background
            ;;
        stop)
            load_config
            stop_service
            ;;
        restart)
            load_config
            restart_service
            ;;
        status)
            load_config
            show_status
            ;;
        logs)
            load_config
            show_logs
            ;;
        tail)
            load_config
            shift
            tail_logs "$@"
            ;;
        follow)
            load_config
            follow_logs
            ;;
        help|--help|-h)
            show_usage
            ;;
        --version|-v)
            echo "$SCRIPT_NAME version $VERSION"
            ;;
        "")
            show_usage
            exit 1
            ;;
        *)
            error_exit "Unknown command: $1. Use '$SCRIPT_NAME help' for usage information."
            ;;
    esac
}

main "$@"